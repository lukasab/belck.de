generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                    String                  @id @default(cuid())
  name                  String?
  email                 String?                 @unique
  emailVerified         DateTime?
  hashedPassword        String?
  image                 String?
  accounts              Account[]
  PokerPlanningVotes    PokerPlanningVote[]
  PokerPlanningRoomUser PokerPlanningRoomUser[]
}

model PokerPlanningRoom {
  id          String                  @id @default(cuid())
  name        String
  description String?
  rounds      PokerPlanningRound[]
  users       PokerPlanningRoomUser[]
}

model PokerPlanningRoomUser {
  id        String            @id @default(cuid())
  room      PokerPlanningRoom @relation(fields: [roomId], references: [id])
  roomId    String
  user      User              @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  active    Boolean           @default(true)
}

model PokerPlanningRound {
  id          String              @id @default(cuid())
  name        String
  description String?
  room        PokerPlanningRoom   @relation(fields: [roomId], references: [id])
  roomId      String
  votes       PokerPlanningVote[]
}

model PokerPlanningVote {
  id        String             @id @default(cuid())
  round     PokerPlanningRound @relation(fields: [roundId], references: [id])
  roundId   String
  user      User               @relation(fields: [userId], references: [id])
  userId    String
  value     String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}
